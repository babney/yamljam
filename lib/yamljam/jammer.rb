module Yamljam
  class Jammer
    def write_output(output_hashmap, output_file)
      begin
        File.open(output_file, 'w') do |f|
          f.puts("# Generated by Yamljam. Do not directly edit this file.")
          f.write(output_hashmap.to_yaml)
        end
      rescue Exception => ex # if it's any solace I cringed when I wrote that
        puts "hit exception when writing output file! #{ex.class} #{ex.message} #{ex.backtrace}"
        raise ex
      end
    end

    def merge_files(input_files, namespace)
      {namespace => input_files.map{|input_file| make_hashmap(input_file)}.reduce({}, &:merge)}
    end

    def make_hashmap(input_file)
      base_hashmap = YAML::load_file(input_file)
    end

    def jam(input_directory_name)
      write_output(jam_recursive(input_directory_name), input_directory_name + ".yml")
    end

    def jam_recursive(input_directory_name)
      Dir.chdir(input_directory_name) do
        directories = Dir.entries('.').reject{|entry| !File.directory?(entry) || entry == '.' || entry == '..'}
        yaml_files = Dir.entries('.').reject{|entry| File.directory?(entry) || !is_yaml?(entry)}
        merged_yaml = merge_files(yaml_files, input_directory_name)
        more_yamls = directories.map{|directory| jam_recursive(directory)}
        
        total_merged_yaml = {input_directory_name => more_yamls.reduce(merged_yaml[input_directory_name], &:merge)}
        return total_merged_yaml
      end
    end

    def is_yaml?(filename)
      %w[yml yaml].include?(filename.split(".").last)
    end
  end
end
